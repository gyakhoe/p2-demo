package com.revature.services;

import com.revature.model.Team;
import com.revature.model.User;
import com.revature.model.dto.IncomingUserDTO;
import com.revature.model.dto.OutgoingUserDTO;
import com.revature.repository.TeamRepository;
import com.revature.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class UserService {


    private final UserRepository userRepository;
    private final TeamRepository teamRepository;



    @Autowired
    public UserService(UserRepository userRepository, TeamRepository teamRepository) {
        this.userRepository = userRepository;
        this.teamRepository = teamRepository;
    }

    // insert user
    public User isnertUser(IncomingUserDTO userDTO) {
        // TODO: make sure the fields are available and valid
        // TODO: make sure incoming username is unique


        // we will need to turn DTO into user
        // user ID will get autogenerated, so 0  is fine for now
        // username and password and role come from the DTO

        User user = new User(
                0,
                userDTO.getUsername(),
                userDTO.getPassword(),
                userDTO.getRole(),
                null
        );

        Optional<Team> team = teamRepository.findById(userDTO.getTeamId());
        if(team.isEmpty()) {
            throw new IllegalArgumentException("Not team found for ID: " +userDTO.getTeamId());
        }

        user.setTeam(team.get());
        return userRepository.save(user);

    }

    // update user
    public User updateUserPassword(int userId, String newPassword) {


        User user = userRepository.findById(userId)
                .orElseThrow(
                        () -> new IllegalArgumentException("No User found with ID " + userId)
                );

        user.setPassword(newPassword);
        return   userRepository.save(user);
    }

    //get all user
    public List<OutgoingUserDTO> getAllUsers() {
          List<User>  users=  userRepository.findAll();
        return users.stream().map(user -> {
           OutgoingUserDTO outDTO = new OutgoingUserDTO();
           outDTO.setUserId(user.getUserId());
           outDTO.setUsername(user.getUsername());
           outDTO.setRole(user.getRole());
           outDTO.setTeam(user.getTeam());
            return outDTO;
        }).toList();
    }
}
